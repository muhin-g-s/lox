package dev.muhings.tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

public class GenerateAst {
	public static void main(String[] args) throws IOException {
		if (args.length != 1) {
			System.err.println("Usage: generate_ast <output directory>");
			System.exit(64);
		}
		String outputDir = args[0];

		defineAst(outputDir, "Expr", Arrays.asList( 
			"Literal  : Object value", 
			"Logical  : Expr left, Token operator, Expr right", 
			"Set      : Expr object, Token name, Expr value", 
			"Super    : Token keyword, Token method", 
			"This     : Token keyword", 
			"Unary    : Token operator, Expr right", 
			"Binary   : Expr left, Token operator, Expr right", 
			"Get      : Expr object, Token name", 
			"Call     : Expr callee, Token paren, List<Expr> arguments", 
			"Grouping : Expr expression", 
			"Variable : Token name", 
			"Assign   : Token name, Expr value"
		), Arrays.asList("import java.util.List;"));

		defineAst(outputDir, "Stmt", Arrays.asList(
			"Expression : Expr expression",
			"Function   : Token name, List<Token> params, List<Stmt> body",
			"If         : Expr condition, Stmt thenBranch, Stmt elseBranch",
			"Block      : List<Stmt> statements",
			"Class      : Token name, Expr.Variable superclass," + " List<Stmt.Function> methods",
			"Print      : Expr expression",
			"Return     : Token keyword, Expr value",
			"Var        : Token name, Expr initializer",
			"While      : Expr condition, Stmt body"
		), Arrays.asList("import java.util.List;"));
  }

	private static void defineAst(
		String outputDir, 
		String baseName, 
		List<String> types, 
		List<String> imports
	) throws IOException {
		var path = outputDir + "/" + baseName + ".java";
		var writer = new PrintWriter(path, "UTF-8");

		writer.println("package dev.muhings.lox;");
		writer.println();
		for (String i : imports) {
			writer.println(i);
			writer.println();
		}
		writer.println("// GENERATED BY GenerateAst.java");

		writer.println();
		
		writer.println("abstract class " + baseName + " {");

		defineVisitor(writer, baseName, types);

		writer.println();
		writer.println("  abstract <R> R accept(Visitor<R> visitor);");
		writer.println();

		for (var type : types) {
			String className = type.split(":")[0].trim();
			String fields = type.split(":")[1].trim();
			defineType(writer, baseName, className, fields);
		}

		writer.print("}");
		writer.close();
	}

	private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) {
		writer.println("  interface Visitor<R> {");

		for (var type : types) {
			var typeName = type.split(":")[0].trim();
			writer.println("    R visit" + typeName + baseName + "(" + typeName + " " + baseName.toLowerCase() + ");");
			writer.println();
		}
		writer.println("  }");
	}

	private static void defineType(PrintWriter writer, String baseName, String className, String fieldList) {
		writer.println("  static class " + className + " extends " + baseName + " {");

		// Constructor
		writer.println("    " + className + "(" + fieldList + ") {");

		// Store parameters in fields.
		String[] fields = fieldList.split(", ");

		for (var field : fields) {
			var name = field.split(" ")[1];
			writer.println("      this." + name + " = " + name + ";");
		}

		writer.println("    }");

		// Visitor pattern
		writer.println();
		writer.println("    @Override");
		writer.println("    <R> R accept(Visitor<R> visitor) {");
		writer.println("      return visitor.visit" + className + baseName + "(this);");
		writer.println("    }");

		// Fields
		writer.println();
		for (var field : fields) {
			writer.println("    final " + field + ";");
		}

		writer.println("  }");
		writer.println();
    }
}
